{"version":3,"sources":["serviceWorker.js","ReactUploadImage.jsx","index.js"],"names":["Boolean","window","location","hostname","match","axios","require","ReactUploadImage","props","state","url","file","filename","onFormSubmit","bind","onChangeFile","onChangeName","e","preventDefault","formData","FormData","append","this","config","headers","body","post","then","res","console","log","catch","err","setState","target","files","value","onSubmit","type","name","onChange","React","Component","ShahnozaApplication","StrictMode","CssBaseline","Container","maxWidth","id","WelcomeTitle","text","TitleAnchor","link","UploadForm","className","href","domainName","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sXAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2DCjBAC,EAAQC,EAAQ,IAmDPC,E,kDAhDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,IAAKF,EAAME,IACXC,KAAM,KACNC,SAAU,IAEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBATL,E,yDAYNG,GACTA,EAAEC,iBACF,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASC,KAAKb,MAAME,MACpC,IAAMY,EAAS,CACXC,QAAS,CACL,eAAgB,uBAEpBC,KAAM,CACF,KAAQH,KAAKb,MAAMG,WAG3BP,EAAMqB,KAAKJ,KAAKb,MAAMC,IAAKS,EAAUI,GAChCI,MAAK,SAACC,GAAD,OAASC,QAAQC,IAAI,sCAAwCF,MAAMG,OAAM,SAAAC,S,mCAG1Ef,GACTK,KAAKW,SAAS,CAAEtB,KAAMM,EAAEiB,OAAOC,MAAM,O,mCAG5BlB,GACTK,KAAKW,SAAS,CAAErB,SAAUK,EAAEiB,OAAOE,U,+BAInC,OACI,0BAAMC,SAAUf,KAAKT,cACjB,2CACA,2BAAOyB,KAAK,OAAOC,KAAK,QAAQC,SAAUlB,KAAKP,eAC/C,2BAAOuB,KAAK,OAAOC,KAAK,UAAUC,SAAUlB,KAAKN,eACjD,4BAAQsB,KAAK,UAAb,e,GA3CeG,IAAMC,W,MCQtB,SAASC,IACtB,OACA,kBAAC,IAAMC,WAAP,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAKC,GAAG,kBAC1B,kBAACC,EAAD,CAAcC,KAAK,wBACnB,kBAACC,EAAD,CAAaD,KAAK,gBAAgBE,KAAK,gBACvC,kBAACC,EAAD,QAMD,SAASJ,EAAazC,GAC3B,OAAO,wBAAI8C,UAAU,iBAAiB9C,EAAM0C,MAGvC,SAASC,EAAY3C,GAC1B,OAAO,uBAAG8C,UAAU,eAAeC,KAAM/C,EAAM4C,MAAO5C,EAAM0C,MAGvD,SAASG,EAAW7C,GACzB,OACE,kBAAC,EAAD,CAAkBE,IAAK8C,iCAI3BC,IAASC,OAAO,kBAACf,EAAD,MAAyBgB,SAASC,eAAe,SF6F3D,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.a9889570.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nconst axios = require(\"axios\");\r\n\r\nclass ReactUploadImage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            url: props.url,\r\n            file: null,\r\n            filename: \"\"\r\n        };\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n        this.onChangeFile = this.onChangeFile.bind(this);\r\n        this.onChangeName = this.onChangeName.bind(this);\r\n    }\r\n\r\n    onFormSubmit(e) {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.append('myimg', this.state.file);\r\n        const config = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            },\r\n            body: {\r\n                'name': this.state.filename\r\n            }\r\n        };\r\n        axios.post(this.state.url, formData, config)\r\n            .then((res) => console.log(\"The file is successfully uploaded: \" + res)).catch(err => {});\r\n    }\r\n\r\n    onChangeFile(e) {\r\n        this.setState({ file: e.target.files[0] });\r\n    }\r\n\r\n    onChangeName(e) {\r\n        this.setState({ filename: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onFormSubmit}>\r\n                <h1>File Upload</h1>\r\n                <input type=\"file\" name=\"myimg\" onChange={this.onChangeFile} />\r\n                <input type=\"text\" name=\"imgname\" onChange={this.onChangeName} />\r\n                <button type=\"submit\">Upload</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactUploadImage","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport ReactUploadImage from './ReactUploadImage.jsx';\n\nimport \"./baseStyles.css\";\n\nvar domainName = \"http://localhost:8081\";\n\nexport default function ShahnozaApplication() {\n  return (\n  <React.StrictMode>\n      <CssBaseline />\n      <Container maxWidth=\"lg\" id=\"main-container\">\n        <WelcomeTitle text=\"Welcome to Shahnoza\"/>\n        <TitleAnchor text=\"Take a Photo!\" link=\"upload.html\"/>\n        <UploadForm />\n      </Container>\n  </React.StrictMode>\n  );\n}\n\nexport function WelcomeTitle(props){\n  return <h1 className=\"welcome-title\">{props.text}</h1>;\n}\n\nexport function TitleAnchor(props){\n  return <a className=\"title-anchor\" href={props.link}>{props.text}</a>;\n}\n\nexport function UploadForm(props){\n  return (\n    <ReactUploadImage url={domainName + \"/upload\"} />\n  );\n}\n\nReactDOM.render(<ShahnozaApplication />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}