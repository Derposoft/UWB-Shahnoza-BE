{"version":3,"sources":["serviceWorker.js","Components/ReactUploadImage.jsx","Components/AppNavBar.jsx","index.js"],"names":["Boolean","window","location","hostname","match","axios","require","ReactUploadImage","props","state","url","file","onFormSubmit","bind","onChangeFile","formClass","e","preventDefault","formData","FormData","append","this","console","log","post","headers","then","res","catch","err","setState","target","files","className","onSubmit","type","name","onChange","React","Component","AppNavBar","Button","disableElevation","variant","size","class","children","ShahnozaApplication","StrictMode","CssBaseline","Container","maxWidth","id","WelcomeTitle","text","TitleAnchor","link","UploadForm","href","domainName","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2YAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4DChBAC,EAAQC,EAAQ,IA8CPC,E,kDA3CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,IAAKF,EAAME,IACXC,KAAM,MAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,UAAYP,EAAMO,UARR,E,yDAWNC,GACTA,EAAEC,iBACF,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASC,KAAKZ,MAAME,MAMpCW,QAAQC,IAAI,SACZlB,EAAMmB,KAAKH,KAAKZ,MAAMC,IAAKQ,EANZ,CACXO,QAAS,CACL,eAAgB,yBAKnBC,MAAK,SAACC,GAAD,OAASL,QAAQC,IAAI,sCAAwCI,MAAMC,OAAM,SAAAC,S,mCAG1Eb,GACTK,KAAKS,SAAS,CACVnB,KAAMK,EAAEe,OAAOC,MAAM,O,+BAKzB,OAEI,0BAAMC,UAAWZ,KAAKN,UAAWmB,SAAUb,KAAKT,cAC5C,2CACA,2BAAOuB,KAAK,OAAOC,KAAK,QAAQC,SAAUhB,KAAKP,eAC/C,4BAAQqB,KAAK,UAAb,e,GAtCeG,IAAMC,W,iCCwBtBC,E,kDAtBX,WAAYhC,GAAO,uCACTA,G,qDAKN,OACI,yBAAKyB,UAAU,eACX,yBAAKA,UAAU,gBACX,kBAACQ,EAAA,EAAD,CAAQC,kBAAgB,EAACC,QAAQ,YAAYC,KAAK,SAC9C,kBAAC,IAAD,QAGR,wBAAIX,UAAU,iBAAd,gBACA,yBAAKY,MAAM,qBACNxB,KAAKb,MAAMsC,e,GAhBRR,IAAMC,W,MCOf,SAASQ,IACtB,OACA,kBAAC,IAAMC,WAAP,KACI,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAKC,GAAG,kBAC1B,kBAACC,EAAD,CAAcC,KAAK,wBACnB,kBAACC,EAAD,CAAaD,KAAK,gBAAgBE,KAAK,gBACvC,kBAACC,EAAD,QAMD,SAASJ,EAAa7C,GAC3B,OAAO,wBAAIyB,UAAU,iBAAiBzB,EAAM8C,MAGvC,SAASC,EAAY/C,GAC1B,OAAO,uBAAGyB,UAAU,eAAeyB,KAAMlD,EAAMgD,MAAOhD,EAAM8C,MAGvD,SAASG,EAAWjD,GACzB,OACE,kBAAC,EAAD,CAAkBE,IAAKiD,yEAAwB5C,UAAU,aAI7D6C,IAASC,OAAO,kBAACd,EAAD,MAAyBe,SAASC,eAAe,SH2F3D,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.955fc5b5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport Card from \"@material-ui/core/Card\";\nconst axios = require(\"axios\");\n\nclass ReactUploadImage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: props.url,\n            file: null\n        };\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.onChangeFile = this.onChangeFile.bind(this);\n        this.formClass = props.formClass;\n    }\n\n    onFormSubmit(e) {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append('image', this.state.file);\n        const config = {\n            headers: {\n                'content-type': 'multipart/form-data'\n            }\n        };\n        console.log(\"POST!\");\n        axios.post(this.state.url, formData, config)\n            .then((res) => console.log(\"The file is successfully uploaded: \" + res)).catch(err => {});\n    }\n\n    onChangeFile(e) {\n        this.setState({ \n            file: e.target.files[0]\n        });\n    }\n\n    render() {\n        return (\n\n            <form className={this.formClass} onSubmit={this.onFormSubmit}>\n                <h1>File Upload</h1>\n                <input type=\"file\" name=\"myimg\" onChange={this.onChangeFile} />\n                <button type=\"submit\">Upload</button>\n            </form>\n        )\n    }\n}\n\nexport default ReactUploadImage","import React from 'react';\nimport \"./AppNavBar.css\";\nimport Button from \"@material-ui/core/Button\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nclass AppNavBar extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n\n    render() {\n        return (\n            <div className=\"app-nav-bar\">\n                <div className=\"app-nav-menu\">\n                    <Button disableElevation variant=\"contained\" size=\"small\">\n                        <MenuIcon />\n                    </Button>\n                </div>\n                <h3 className=\"app-nav-title\">Shahnoza App</h3>\n                <div class=\"app-nav-container\">\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AppNavBar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport ReactUploadImage from './Components/ReactUploadImage.jsx';\nimport AppNavBar from \"./Components/AppNavBar.jsx\";\n\nimport \"./baseStyles.css\";\n\nvar domainName = \"http://shahnoza-env.eba-vnr85xj3.us-east-2.elasticbeanstalk.com\";\n\nexport default function ShahnozaApplication() {\n  return (\n  <React.StrictMode>\n      <CssBaseline />\n      <AppNavBar></AppNavBar>\n      <Container maxWidth=\"lg\" id=\"main-container\">\n        <WelcomeTitle text=\"Welcome to Shahnoza\"/>\n        <TitleAnchor text=\"Take a Photo!\" link=\"upload.html\"/>\n        <UploadForm />\n      </Container>\n  </React.StrictMode>\n  );\n}\n\nexport function WelcomeTitle(props){\n  return <h1 className=\"welcome-title\">{props.text}</h1>;\n}\n\nexport function TitleAnchor(props){\n  return <a className=\"title-anchor\" href={props.link}>{props.text}</a>;\n}\n\nexport function UploadForm(props){\n  return (\n    <ReactUploadImage url={domainName + \"/upload\"} formClass=\"app-form\" />\n  );\n}\n\nReactDOM.render(<ShahnozaApplication />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}